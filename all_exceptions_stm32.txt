1) Over-temperature Exception (Analog Watchdog)
#include "stm32f10x.h"

#define TEMP_THRESHOLD 75  // Define your temperature threshold

void ADC1_2_IRQHandler(void) {
    if (ADC_GetFlagStatus(ADC1, ADC_FLAG_AWD)) {
        // Stop the fan
        StopFan(); 
        // Clear the Analog Watchdog flag
        ADC_ClearFlag(ADC1, ADC_FLAG_AWD);
    }
}

void Configure_ADC_AWD(void) {
    ADC_AnalogWatchdogThresholdsConfig(ADC1, TEMP_THRESHOLD, 0xFFF); // Set upper threshold
    ADC_AnalogWatchdogSingleChannelConfig(ADC1, ADC_Channel_0); // Use the appropriate channel
    ADC_AnalogWatchdogCmd(ADC1, ENABLE);
    NVIC_EnableIRQ(ADC1_2_IRQn); // Enable ADC1_2 interrupt
}

*/****************************************************************************************************/*
2) ADC Overrun Exception
void ADC1_2_IRQHandler(void) {
    if (ADC_GetFlagStatus(ADC1, ADC_FLAG_OVR)) {
        // Clear the OVR flag
        ADC_ClearFlag(ADC1, ADC_FLAG_OVR);
        // Reset ADC conversion if necessary
        ADC_SoftwareStartConvCmd(ADC1, ENABLE);
    }
}

*/****************************************************************************************************/*
3) I2C Communication Failure with LCD
void I2C1_EV_IRQHandler(void) {
    if (I2C_GetFlagStatus(I2C1, I2C_FLAG_AF)) {
        // Acknowledge failure
        I2C_ClearFlag(I2C1, I2C_FLAG_AF);
        // Handling communication error
        ResetI2CConfig();
    }
}

*/****************************************************************************************************/*
4)Power Supply Interruption Exception

void PVD_IRQHandler(void) {
    if (PWR_GetFlagStatus(PWR_FLAG_PVD) != RESET) {
        // Handle power failure
        StopFan(); // implementing fan stopping
        // Clear PVD flag
        PWR_ClearFlag(PWR_FLAG_PVD);
    }
}

*/****************************************************************************************************/*
5)ADC Calibration Failure Exception
void Init_ADC(void) {
    ADC_InitTypeDef ADC_InitStructure;
    ADC_StructInit(&ADC_InitStructure);
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE; 
    ADC_Init(ADC1, &ADC_InitStructure);

    if (ADC_GetCalibrationStatus(ADC1)) {
        // Calibration failed, handle the failure
        HandleCalibrationFailure(); 
    } else {
        ADC_Cmd(ADC1, ENABLE);
    }
}





